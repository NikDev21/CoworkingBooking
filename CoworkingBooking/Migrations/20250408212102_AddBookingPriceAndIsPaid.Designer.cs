// <auto-generated />
using System;
using CoworkingBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoworkingBooking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250408212102_AddBookingPriceAndIsPaid")]
    partial class AddBookingPriceAndIsPaid
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CoworkingBooking.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CoworkingBooking.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoworkingBooking.Models.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            Location = "First Floor",
                            Name = "Room C"
                        },
                        new
                        {
                            Id = 5,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Room D"
                        },
                        new
                        {
                            Id = 6,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Room E"
                        },
                        new
                        {
                            Id = 7,
                            IsAvailable = true,
                            Location = "Third Floor",
                            Name = "Room F"
                        },
                        new
                        {
                            Id = 8,
                            IsAvailable = true,
                            Location = "Third Floor",
                            Name = "Room G"
                        },
                        new
                        {
                            Id = 9,
                            IsAvailable = true,
                            Location = "First Floor",
                            Name = "Focus Booth 1"
                        },
                        new
                        {
                            Id = 10,
                            IsAvailable = true,
                            Location = "First Floor",
                            Name = "Focus Booth 2"
                        },
                        new
                        {
                            Id = 11,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Open Desk 1"
                        },
                        new
                        {
                            Id = 12,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Open Desk 2"
                        },
                        new
                        {
                            Id = 13,
                            IsAvailable = true,
                            Location = "Third Floor",
                            Name = "Quiet Zone"
                        },
                        new
                        {
                            Id = 14,
                            IsAvailable = true,
                            Location = "Fourth Floor",
                            Name = "Hot Desk 1"
                        },
                        new
                        {
                            Id = 15,
                            IsAvailable = true,
                            Location = "Fourth Floor",
                            Name = "Hot Desk 2"
                        },
                        new
                        {
                            Id = 16,
                            IsAvailable = true,
                            Location = "Fourth Floor",
                            Name = "Hot Desk 3"
                        },
                        new
                        {
                            Id = 17,
                            IsAvailable = true,
                            Location = "First Floor",
                            Name = "Solo Cabin 1"
                        },
                        new
                        {
                            Id = 18,
                            IsAvailable = true,
                            Location = "First Floor",
                            Name = "Solo Cabin 2"
                        },
                        new
                        {
                            Id = 19,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Team Table 1"
                        },
                        new
                        {
                            Id = 20,
                            IsAvailable = true,
                            Location = "Second Floor",
                            Name = "Team Table 2"
                        },
                        new
                        {
                            Id = 21,
                            IsAvailable = true,
                            Location = "Third Floor",
                            Name = "Conference Spot"
                        },
                        new
                        {
                            Id = 22,
                            IsAvailable = true,
                            Location = "Third Floor",
                            Name = "Brainstorm Zone"
                        },
                        new
                        {
                            Id = 23,
                            IsAvailable = true,
                            Location = "Top Floor",
                            Name = "Meeting Box"
                        });
                });

            modelBuilder.Entity("CoworkingBooking.Models.Booking", b =>
                {
                    b.HasOne("CoworkingBooking.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoworkingBooking.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });
#pragma warning restore 612, 618
        }
    }
}
